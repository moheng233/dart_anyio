// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset(
  'package:anyio_adapter_modbus/src/vci_can/generated_bindings.dart',
)
library;

import 'dart:ffi' as ffi;

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_OpenDevice')
external int openDevice(
  int DeviceType,
  int DeviceInd,
  int Reserved,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.UnsignedLong)>(
  symbol: 'VCI_CloseDevice',
)
external int closeDevice(
  int DeviceType,
  int DeviceInd,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.Pointer<InitConfig>,
  )
>(symbol: 'VCI_InitCAN')
external int initCAN(
  int DeviceType,
  int DeviceInd,
  int CANInd,
  ffi.Pointer<InitConfig> pInitConfig,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.Pointer<BoardInfo>,
  )
>(symbol: 'VCI_ReadBoardInfo')
external int readBoardInfo(
  int DeviceType,
  int DeviceInd,
  ffi.Pointer<BoardInfo> pInfo,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'VCI_SetReference')
external int setReference(
  int DeviceType,
  int DeviceInd,
  int CANInd,
  int RefType,
  ffi.Pointer<ffi.Void> pData,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_GetReceiveNum')
external int getReceiveNum(
  int DeviceType,
  int DeviceInd,
  int CANInd,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_ClearBuffer')
external int clearBuffer(
  int DeviceType,
  int DeviceInd,
  int CANInd,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_StartCAN')
external int startCAN(
  int DeviceType,
  int DeviceInd,
  int CANInd,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_ResetCAN')
external int resetCAN(
  int DeviceType,
  int DeviceInd,
  int CANInd,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.Pointer<CanObj>,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_Transmit')
external int transmit(
  int DeviceType,
  int DeviceInd,
  int CANInd,
  ffi.Pointer<CanObj> pSend,
  int Len,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.Pointer<CanObj>,
    ffi.UnsignedLong,
    ffi.Int,
  )
>(symbol: 'VCI_Receive')
external int receive(
  int DeviceType,
  int DeviceInd,
  int CANInd,
  ffi.Pointer<CanObj> pReceive,
  int Len,
  int WaitTime,
);

@ffi.Native<
  ffi.UnsignedLong Function(
    ffi.UnsignedLong,
    ffi.UnsignedLong,
    ffi.UnsignedLong,
  )
>(symbol: 'VCI_UsbDeviceReset')
external int usbDeviceReset(
  int DevType,
  int DevIndex,
  int Reserved,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<BoardInfo>)>(
  symbol: 'VCI_FindUsbDevice2',
)
external int findUsbDevice2(
  ffi.Pointer<BoardInfo> pInfo,
);

final class BoardInfo extends ffi.Struct {
  @ffi.UnsignedShort()
  external int hw_Version;

  @ffi.UnsignedShort()
  external int fw_Version;

  @ffi.UnsignedShort()
  external int dr_Version;

  @ffi.UnsignedShort()
  external int in_Version;

  @ffi.UnsignedShort()
  external int irq_Num;

  @ffi.UnsignedChar()
  external int can_Num;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> str_Serial_Num;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> str_hw_Type;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> Reserved;
}

final class CanObj extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ID;

  @ffi.UnsignedInt()
  external int TimeStamp;

  @ffi.UnsignedChar()
  external int TimeFlag;

  @ffi.UnsignedChar()
  external int SendType;

  @ffi.UnsignedChar()
  external int RemoteFlag;

  @ffi.UnsignedChar()
  external int ExternFlag;

  @ffi.UnsignedChar()
  external int DataLen;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> Data;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> Reserved;
}

final class InitConfig extends ffi.Struct {
  @ffi.UnsignedLong()
  external int AccCode;

  @ffi.UnsignedLong()
  external int AccMask;

  @ffi.UnsignedLong()
  external int Reserved;

  @ffi.UnsignedChar()
  external int Filter;

  @ffi.UnsignedChar()
  external int Timing0;

  @ffi.UnsignedChar()
  external int Timing1;

  @ffi.UnsignedChar()
  external int Mode;
}

/// ////// new add struct for filter /////////
final class FilterRecord extends ffi.Struct {
  @ffi.UnsignedLong()
  external int ExtFrame;

  @ffi.UnsignedLong()
  external int Start;

  @ffi.UnsignedLong()
  external int End;
}
